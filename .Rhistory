mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()) %>%
arrange(-count), by = c("group"="itemID")) %>%
filter(rank(-count) < 40) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper, size=count)) +
geom_pointinterval()
#most used
to_plot %>%
left_join(df %>%
mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()) %>%
arrange(-count), by = c("group"="itemID")) %>%
filter(rank(-count) < 40) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper, size=count)) +
geom_pointinterval() +
geom_point()
#most used
to_plot %>%
left_join(df %>%
mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()) %>%
arrange(-count), by = c("group"="itemID")) %>%
filter(rank(-count) < 40) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper, size=count)) +
geom_pointinterval()# +
#most used
to_plot %>%
left_join(df %>%
mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()) %>%
arrange(-count), by = c("group"="itemID")) %>%
filter(rank(-count) < 40) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper, size=count)) +
geom_pointinterval() +
geom_point()
df_ratings <- read_csv("data/new_df.csv")
df_users <- read_csv("data/users.csv") %>%
mutate(focus = if_else(is.na(focus), for_focus, focus),
cognition = if_else(is.na(cognition), for_cognition, cognition),
mood = if_else(is.na(mood), for_mood, mood),
anxiety = if_else(is.na(anxiety), for_anxiety, anxiety),
motivation = if_else(is.na(motivation), for_motivation, motivation)) %>%
select(-for_focus, -for_anxiety, -for_motivation, -for_cognition, -for_mood)
df_metadata <- read_delim("data/nootropics_metadata.csv", delim=";")
df_users %>% write_csv("data/users_fixed.csv")
library(tidyverse)
df_ratings <- read_csv("data/new_df.csv")
df_users <- read_csv("data/users.csv") %>%
mutate(focus = if_else(is.na(focus), for_focus, focus),
cognition = if_else(is.na(cognition), for_cognition, cognition),
mood = if_else(is.na(mood), for_mood, mood),
anxiety = if_else(is.na(anxiety), for_anxiety, anxiety),
motivation = if_else(is.na(motivation), for_motivation, motivation)) %>%
select(-for_focus, -for_anxiety, -for_motivation, -for_cognition, -for_mood)
df_metadata <- read_delim("data/nootropics_metadata.csv", delim=";")
df <-  df_ratings %>%
left_join(df_users %>% mutate(userID = as.numeric(userID)), by = c("userID"))
library(rstanarm)
options(mc.cores = parallel::detectCores())
l <- stan_glmer(rating ~ (1 | itemID) + (1 | userID), data = df,
family = gaussian(link = "identity"),
seed = 12345)
library(tidybayes)
to_plot <- l %>%
spread_draws(`(Intercept)`, b[,group])%>%
filter(str_detect(group, "itemID:")) %>%
mutate(group = str_remove(group, "itemID:")) %>%
median_qi(condition_mean = `(Intercept)` + b, .width = c(.95, .66)) %>%
mutate(group = fct_reorder(group, condition_mean))
#best
to_plot %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
#worse
to_plot %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper < 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
#most used
to_plot %>%
left_join(df %>%
mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()) %>%
arrange(-count), by = c("group"="itemID")) %>%
filter(rank(-count) < 40) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper, size=count)) +
geom_pointinterval() +
geom_point()
library(ggrepel)
to_plot %>%
select(group, condition_mean) %>%
distinct() %>%
left_join(df %>%
mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()), by = c("group" = "itemID")) %>%
ggplot() +
ggrepel::geom_text_repel(aes(x = count, y = condition_mean, label=group), segment.colour = NA)# +
#by category
to_plot %>%
filter(group %in% (df_metadata %>%
filter(str_detect(type, "Lifestyle")) %>%
mutate(nootropic_short = str_replace_all(nootropic_short, " ", "_")))$nootropic_short) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot %>%
filter(group %in% (df_metadata %>%
filter(str_detect(type, "Modafinil")) %>%
mutate(nootropic_short = str_replace_all(nootropic_short, " ", "_")))$nootropic_short) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
l %>%
spread_draws(`(Intercept)`, b[,group])%>%
filter(str_detect(group, "itemID:")) %>%
mutate(group = str_remove(group, "itemID:")) %>%
filter(group %in% (df_metadata %>%
filter(str_detect(type, "Modafinil")) %>%
mutate(nootropic_short = str_replace_all(nootropic_short, " ", "_")))$nootropic_short) %>%
mutate(condition_mean = `(Intercept)` + b) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(x = condition_mean, fill = group)) +
stat_halfeye(alpha=0.5)
to_plot %>%
filter(group %in% (df_metadata %>%
filter(str_detect(type, "Racetam")) %>%
mutate(nootropic_short = str_replace_all(nootropic_short, " ", "_")))$nootropic_short) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot %>%
filter(group %in% (df_metadata %>%
filter(str_detect(type, "Racetams")) %>%
mutate(nootropic_short = str_replace_all(nootropic_short, " ", "_")))$nootropic_short) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
df %>%
mutate(is_effective = if_else(rating > 0, 1, 0)) %>%
group_bu(itemID) %>%
summarise(a = mean(is_effective))
df %>%
mutate(is_effective = if_else(rating > 0, 1, 0)) %>%
group_by(itemID) %>%
summarise(a = mean(is_effective))
View(df %>%
mutate(is_effective = if_else(rating > 0, 1, 0)) %>%
group_by(itemID) %>%
summarise(a = mean(is_effective)))
View(df %>%
mutate(is_effective = if_else(rating > 0, 1, 1)) %>%
group_by(itemID) %>%
summarise(a = mean(is_effective)))
View(df %>%
mutate(is_effective = if_else(rating > 1, 0, 1)) %>%
group_by(itemID) %>%
summarise(a = mean(is_effective)))
df %>%
group_by(userID) %>%
mutate(n_ratings = n())
View(df %>%
group_by(userID) %>%
mutate(n_ratings = n()))
View(df %>%
group_by(userID) %>%
mutate(n_ratings = n()) %>%
filter(n_ratings > 5) %>%
mutate(is_effective = if_else(rating > min(rating), 0, 1)))
View(df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
mutate(is_effective = if_else(rating > min_rating, 0, 1)))
View(df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
mutate(is_effective = if_else(rating > min_rating, 1, 0))) %>%
group_by(itemID) %>%
summarise(a = mean(is_effective)))
View(df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
mutate(is_effective = if_else(rating > min_rating, 1, 0)))
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
mutate(is_effective = if_else(rating > min_rating, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(a = mean(is_effective))
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5)
df
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
mutate(is_effective = if_else(rating > 0, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(a = mean(is_effective))
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
mutate(is_effective = if_else(rating > 0, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(a = mean(is_effective))
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(min_rating == 0)
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
group_by(min_rating) %>%
summarise(count = n())
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
group_by(min_rating) %>%
summarise(count = n())
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%
group_by(min_rating) %>%
summarise(count = n())
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = count / n())
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = count / n(), test = n())
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = 100 * count / sum(count))
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 5) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = 100 * count / sum(count))
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 0) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = 100 * count / sum(count))
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10)
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10)
df %>%
group_by(userID) %>%
summarise(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%
group_by(min_rating) %>%
summarise(count = n()) %>%
mutate(prop = 100 * count / sum(count))
df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%  #?
mutate(is_effective = if_else(rating > min_rating, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(a = mean(is_effective))
l_effective <- stan_glmer(is_effective ~ (1 | itemID) + (1 | userID), data =  df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%  #?
mutate(is_effective = if_else(rating > min_rating, 1, 0)),
family = binomial(link = "logit"))
to_plot_effective <- l_effective %>%
spread_draws(`(Intercept)`, b[,group])%>%
filter(str_detect(group, "itemID:")) %>%
mutate(group = str_remove(group, "itemID:")) %>%
median_qi(condition_mean = `(Intercept)` + b, .width = c(.95, .66)) %>%
mutate(group = fct_reorder(group, condition_mean))
to_plot_effective %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
#best
to_plot %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot_effective %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper < 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot_effective %>%
left_join(df %>%
mutate(itemID = str_replace_all(itemID, " ", "_")) %>%
group_by(itemID) %>%
summarise(count = n()) %>%
arrange(-count), by = c("group"="itemID")) %>%
filter(rank(-count) < 40) %>%
mutate(group = fct_reorder(group, condition_mean)) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper, size=count)) +
geom_pointinterval() +
geom_point()
to_plot_effective %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot_effective %>%
filter(group %in% (df_metadata %>%
filter(str_detect(type, "Modafinil")) %>%
mutate(nootropic_short = str_replace_all(nootropic_short, " ", "_")))$nootropic_short) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
library(tidyverse)
df_ratings <- read_csv("data/new_df.csv")
df_users <- read_csv("data/users.csv") %>%
mutate(focus = if_else(is.na(focus), for_focus, focus),
cognition = if_else(is.na(cognition), for_cognition, cognition),
mood = if_else(is.na(mood), for_mood, mood),
anxiety = if_else(is.na(anxiety), for_anxiety, anxiety),
motivation = if_else(is.na(motivation), for_motivation, motivation)) %>%
select(-for_focus, -for_anxiety, -for_motivation, -for_cognition, -for_mood)
df_metadata <- read_delim("data/nootropics_metadata.csv", delim=";")
df <-  df_ratings %>%
left_join(df_users %>% mutate(userID = as.numeric(userID)), by = c("userID"))
df %>%
group_by(userID) %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(a = mean(life_changing))
View(df %>%
group_by(userID) %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(proba_life_changing = mean(life_changing)) %>%
arrange(proba_life_changing))
View(df %>%
group_by(userID) %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(proba_life_changing = mean(life_changing), count = n()) %>%
arrange(proba_life_changing))
df %>%
group_by(userID) %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
summarise(proba_life_changing = mean(life_changing), count = n())
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
summarise(proba_life_changing = mean(life_changing), count = n())
View(df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(itemID) %>%
summarise(proba_life_changing = mean(life_changing), count = n()) %>%
arrange(proba_life_changing))
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
summarise(n_life_changing = sum(life_changing)) %>%
group_by(n_life_changing) %>%
summarise(count = n())
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
#summarise(n_life_changing = sum(life_changing)) %>%
#group_by(n_life_changing) %>%
summarise(count = n())
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
summarise(n_life_changing = sum(life_changing)) %>%
group_by(n_life_changing) %>%
summarise(count = n())
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
mutate(n_life_changing = sum(life_changing), count = n()) %>%
filter(n_life_changing / count < 0.1 )
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
mutate(n_life_changing = sum(life_changing), count = n()) %>%
filter(n_life_changing / count < 0.3) %>%
ungroup() %>%
group_by(itemID) %>%
summarise(proba_life_changing = mean(life_changing), count = n()) %>%
arrange(proba_life_changing)
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
mutate(n_life_changing = sum(life_changing), count = n()) %>%
filter(n_life_changing / count < 0.3)
df
df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
mutate(n_life_changing = sum(life_changing), count = n()) %>%
filter(n_life_changing / count < 0.2)
View(df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
mutate(n_life_changing = sum(life_changing), count = n()) %>%
filter(n_life_changing / count < 0.2) %>%
ungroup() %>%
group_by(itemID) %>%
summarise(proba_life_changing = mean(life_changing), count = n()) %>%
arrange(proba_life_changing))
View(df %>%
mutate(life_changing = if_else(rating == 10, 1, 0)) %>%  #adjust for the fact that a lot of people haven't understood that 1 = positive
group_by(userID) %>%
mutate(n_life_changing = sum(life_changing), count = n()) %>%
filter(n_life_changing / count < 0.2) %>%
ungroup() %>%
group_by(itemID) %>%
summarise(proba_life_changing = mean(life_changing), count = n()) %>%
arrange(proba_life_changing))
#best
to_plot %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot <- l %>%
spread_draws(`(Intercept)`, b[,group])%>%
filter(str_detect(group, "itemID:")) %>%
mutate(group = str_remove(group, "itemID:")) %>%
median_qi(condition_mean = `(Intercept)` + b, .width = c(.95, .66)) %>%
mutate(group = fct_reorder(group, condition_mean))
library(rstanarm)
options(mc.cores = parallel::detectCores())
l_effective <- stan_glmer(is_effective ~ (1 | itemID) + (1 | userID), data =  df %>%
group_by(userID) %>%
mutate(n_ratings = n(), min_rating = min(rating)) %>%
filter(n_ratings > 10) %>%  #?
mutate(is_effective = if_else(rating > min_rating, 1, 0)),
family = binomial(link = "logit"))
l <- stan_glmer(rating ~ (1 | itemID) + (1 | userID), data = df,
family = gaussian(link = "identity"),
seed = 12345)
library(tidybayes)
to_plot <- l %>%
spread_draws(`(Intercept)`, b[,group])%>%
filter(str_detect(group, "itemID:")) %>%
mutate(group = str_remove(group, "itemID:")) %>%
median_qi(condition_mean = `(Intercept)` + b, .width = c(.95, .66)) %>%
mutate(group = fct_reorder(group, condition_mean))
to_plot_effective <- l_effective %>%
spread_draws(`(Intercept)`, b[,group])%>%
filter(str_detect(group, "itemID:")) %>%
mutate(group = str_remove(group, "itemID:")) %>%
median_qi(condition_mean = `(Intercept)` + b, .width = c(.95, .66)) %>%
mutate(group = fct_reorder(group, condition_mean))
#best
to_plot %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot_effective %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot %>%
bind_rows(to_plot_effective) %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot %>%
mutate(proba = F) %>%
bind_rows(to_plot_effective %>% mutate(proba = T)) %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, color=prob, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
to_plot %>%
mutate(proba = F) %>%
bind_rows(to_plot_effective %>% mutate(proba = T)) %>%
filter(group %in% (to_plot %>% filter(.width==0.95) %>% filter(.upper > 4.5))$group) %>%
ggplot(aes(y = group, x = condition_mean, color=proba, xmin = .lower, xmax = .upper)) +
geom_pointinterval()
